2. ðŸ’­ Internal Dialogue: Have explicit conversation w/ yourself about:
   - "What is real problem we're solving?"
   - "What are different approaches we cld take?"
   - "What are risks & trade-offs of each approach?"
   - "What parts of existing system will interact w/?"
   - "What cld go wrong & how wld we handle?"

3. Context-Informed Planning: Plan shld reflect:
   - Current codebase patterns & conventions
   - Existing infrastructure & tooling
   - Team practices & proj constraints
   - Realistic scope & timeline considerations
   - All 4 valid8n pillars (Standards, Docs, Patterns, Testing)

4. âœ… Plan Valid8n: B4 presenting plan:
   - Review against actual codebase once more
   - Check if making unrealistic assumptions
   - Ensure plan is actionable
   - Consider alternative approaches might have missed
   - Verify valid8n checkpoints are included throughout

ðŸ’¡ Remember: 5-minute planning conversation w/ yourself can save hours of wrong-direction impl

#### Best Practices
- Follow establshd architectural patterns
- Consider perf implications
- Plan 4 monitoring & observability
- Design 4 sec from start

### Testing

#### Testing Approach
- Write tests that verify behavior, not impl
- Use appropr8 testing frameworks
- Follow testing pyramid (unit, integration, e2e)
- Maintain good test coverage

#### Test Quality
- Write clear, readable tests
- Use descriptive test names
- Test edge cases & error conditions
- Keep tests independent & isolated

#### Test-Driven Dev
- Write tests b4 impl features
- Use tests 2 guide design decisions
- Refactor w/ confidence when tests in place
- Update tests when req change

#### Valid8n & Verification
- Valid8 inputs & outputs
- Test error handling paths
- Verify perf req
- Check sec & accessibility

### Docs

#### Docs Principles
- Write 4 ur audience
- Keep docs close 2 code
- Update docs when code changes
- Use examples 2 clarify concepts

#### API Docs
- Document all public interfaces
- Include param descriptions & types
- Provide usage examples
- Document error conditions

#### Code Explanations
- Comment complex logic & algorithms
- Explain "why" behind decisions
- Use clear, concise language
- Avoid obvious comments
- NEVER write comments about changes I ask u 2 make. Comment about code as exists, not history of session
- NEVER write comments unless will be useful 2 dev reading code 4 first time
- NEVER write "changelog" style comments (e.g., "added", "updated", "removed")